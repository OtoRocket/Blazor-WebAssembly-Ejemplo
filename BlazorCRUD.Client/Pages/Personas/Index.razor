@page "/indice-personas"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.IO
@using CsvHelper
@using System.Text.Json

<h3>Personas</h3>

<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <a class="btn btn-success" href="crear-persona">Nueva Persona</a>
        </div>
    </Authorized>
</AuthorizeView>

<Paginacion PaginasTotales="paginasTotales" PaginaActual="paginaActual" 
            PaginaSeleccionada="PaginaSeleccionada"></Paginacion>

<ListadoGenerico Listado="personas">
    <PlantillaConElementos>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Id</th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var persona in personas)
                {
                    <tr>
                        <td>
                            <AuthorizeView>
                                <Authorized>
                                    <a class="btn btn-success" href="editar-persona/@persona.Id">Editar</a>
                                    <button class="btn btn-danger" @onclick="@(() => BorrarPersona(persona.Id))">Borrar</button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                        <td>@persona.Id</td>
                        <td>@persona.Nombre</td>
                    </tr>
                }
            </tbody>
        </table>

    </PlantillaConElementos>
</ListadoGenerico>

@if (personas?.Count > 0)
{
    <button @onclick="ExportarCSV">Exportar a CSV</button>
    <button @onclick="ExportarExcel">Exportar a Excel</button>
}


@code {
    List<Persona> personas { get; set; }

    private int paginaActual = 1;
    private int paginasTotales;

    protected override async Task OnInitializedAsync()
    {
        await CargarPersonas();
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarPersonas(pagina);
    }

    async Task CargarPersonas(int pagina = 1, int cantidadRegistrosAMostrar = 10)
    {
        var httpResponse = await Http.GetAsync($"personas?pagina={pagina}&CantidadAMostrar={cantidadRegistrosAMostrar}");
        if (httpResponse.IsSuccessStatusCode)
        {
            paginasTotales = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            personas = JsonSerializer.Deserialize<List<Persona>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    async Task BorrarPersona(int idPersona)
    {
        var personaSeleccionada = personas.First(x => x.Id == idPersona);
        string mensajeConfirmacion = $"¿Deseas borrar a la persona {personaSeleccionada.Nombre}?";
        if (await JS.Confirm("Confirmar", mensajeConfirmacion, TipoMensajeSweetAlert.question))
        {
            await Http.DeleteAsync($"personas/{idPersona}");
            await CargarPersonas();
        }
    }

    private void ExportarCSV()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvWriter(writer))
                {
                    csv.WriteRecords(personas);
                }

                var arr = memoryStream.ToArray();
                JS.GuardarComo("personas.csv", arr);
            }
        }
    }

    private void ExportarExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Personas");

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection(
                from f in personas
                select new { f.Id, f.Nombre }, true);

            var header = worksheet.Cells["A1:B1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            JS.GuardarComo("personas.xlsx", package.GetAsByteArray());
        }
    }
}
